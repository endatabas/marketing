
# Endatabas is a SQL document database with full history.
# This demo will explain what that means.

# First, we'll pull the latest release.
docker pull docker.io/endatabas/endb:latest

# Then we'll start an empty database.
docker run --rm -p 3803:3803 -v demo_data:/app/demo_data docker.io/endatabas/endb:latest

@CTRL+PGDN

# Clients talk to Endb over HTTP, and any HTTP client will work.
# Hello World!
curl -d "SELECT 'Hello World'" -H "Content-Type: application/sql" -X POST http://localhost:3803/sql

# Since endb schemas are per-document, there's no meaning to CREATE TABLE
# and you start right away by inserting a row with SQL you already know.
# (As a side-note, this allows you to jam semi-structured data,
#  like a random json document, straight into endb.)
curl -d "INSERT INTO sales (name, price, at) VALUES ('Taro', 1.99, DATE '2023-08-30')" -H "Content-Type: application/sql" -X POST http://localhost:3803/sql

# Here's the data we just inserted, returned as JSON-LD.
curl -d "SELECT * FROM sales" -H "Content-Type: application/sql" -H "Accept: application/ld+json" -X POST http://localhost:3803/sql

# Here's a more interesting statement: we'll use a json content type, insert a jagged doc
# (with different columns than before) with a JSON-LD typed parameter
curl -d '{"q": "INSERT INTO sales {name: ?, price: ?, at: ?}", "p": ["Mangoes", 15.99, {"@type": "xsd:date", "@value": "2023-09-05"}]}' -H "Content-Type: application/json" -X POST http://localhost:3803/sql

# let's get our sales back out as vanilla JSON
curl -d "SELECT * FROM sales" -H "Content-Type: application/sql" -X POST http://localhost:3803/sql

# The HTTP API supports other ways to express a query,
# but they're all equivalent.

# let's clear the screen and look at a code example
@CTRL+L

# We have a few little scripts here, in JavaScript and Python.
# Each one is under a hundred lines.
wc -l examples/*.{py,mjs}
cd examples

# These examples are tiny wrapper libraries around standard HTTP libs.
# Here's an insert sent with the Python library.
python3
import endb
endb.Endb().sql("INSERT INTO products {name: 'Mangoes', price: 2.99}")

# We'll provide native client libraries for popular languages
# in the future -- but for now, anyone can write a client library
# with a few dozen lines of code.

# let's drop out of python and look at the SQL dialect
@CTRL+D
@CTRL+L

# We also have a little toy console we'll use for the remaining examples,
# so we can focus on the SQL dialect.
./endb_console.py

# First up, let's have a look at some example literals.
# The TEXT datatype permits double quotes.
# Timestamps can be represented in either SQL or ISO formats.
INSERT INTO sales {name: "Mangoes", price: 22.99, at: 2023-09-07T07:34:02}

# Endb also has convenient ISO literals for dates, times, intervals
# as well as all the SQL literals you'd expect.

# All joins in endb are ad-hoc.
SELECT * FROM sales s JOIN products p ON s.name = p.name

# Here's an aggregate
SELECT p.name, SUM(s.price) AS total FROM sales s JOIN products p ON s.name = p.name GROUP BY p.name

# Time for full history!
@CTRL+L

# When we say "full history", we really mean (to programmers, at least)
# that data in endb is immutable.

INSERT INTO products {name: "Mustard", price: 5.99}

# We'll grab the current time before we update, so we can time-travel back here.
SELECT strftime('%Y-%m-%dT%H:%M:%S', CURRENT_TIMESTAMP) AS now;
UPDATE products SET price = 4.99 WHERE name = 'Mustard'

# all queries default to running "as of now", which is the normal
# behaviour you'd expect in any other database. we see the new 4.99 price.
SELECT * FROM products WHERE name = 'Mustard'

# However, we can travel back in time to the timestamp between
# our insert and update to see the old value.
# SELECT * FROM products FOR SYSTEM_TIME AS OF
@AS_OF

# It's also possible to get an omniscient view of all system time.
# Here are all the past states for Mustard:
SELECT * FROM products FOR SYSTEM_TIME ALL WHERE name = 'Mustard'

# Deletes work the same way as update; they don't alter the past.
# Of course, a modern database needs to comply with laws like GDPR,
# so endb supports ERASE.
ERASE FROM products WHERE name = 'Mustard'
SELECT * FROM products FOR SYSTEM_TIME ALL

# on to documents!
@CTRL+L

# Document-shaped rows support strongly-typed, native nested data.

# we'll add a couple stores
INSERT INTO stores {brand: "Schonfinkel's", addresses: [{city: "Ekaterinoslav", country: "Russia", active: 1888-09-29}, {city: "Gottingen", country: "Germany", active: 1920-12-20}]}
INSERT INTO stores {brand: "Curry's", addresses: [{city: "Millis", country: "USA", active: 1900-09-12}, {city: "Boston", country: "Germany", active: 1930-07-15}]}

# ...select from a nested column
SELECT addresses[0].city FROM stores

# ...and try recursion
SELECT addresses..country FROM stores

# Endb's documents also support row literals, wildcards, spreads,
# shorthand fields, computed fields, and path functions

# TODO: nested - shorthand construct JSON

# while many people will prefer endb's path functions for manipulating data,
# the 'update' statement also allows path expressions

UPDATE stores SET $.addresses[1].city = 'Gottingen' WHERE brand = "Curry's";
SELECT * FROM stores WHERE brand = "Curry's";

# last, we'll clear that away to have a look at endb's schema
@CTRL+L

# even without forcing strict schema on tables, it is possible to inspect
# the information schema through regular queries
SELECT * FROM information_schema.columns WHERE table_name = 'stores';

# We encourage you to try it for yourself!

# done! reset
@CTRL+D
cd ~/tmp/endb/
